<?php

// $Id$

/**
 * Copyright 2011 ILRI
 *
 * This file is part of DataBridge.
 * 
 * DataBridge is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DataBridge is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DataBridge.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Initialize the DataBridge interface.
 *
 * This function loads external resources that are used by the DataBridge 
 * module. 
*/
function DataBridge_init() {
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.analysis.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.animalview.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.sampling.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.summary.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.sample.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.forms.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.database.external.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.database.internal.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.external.inc');
  include_once(drupal_get_path('module', 'DataBridge') . '/DataBridge.tables.inc');
  drupal_add_css(drupal_get_path('module', 'DataBridge') . '/DataBridge.css');
}

/** 
 * Generates a user help page. 
 *
 * Creates a help page for the DataBridge module. Explains configuration, usage 
 * and some tips and tricks on what can be done.
 *
 * @param string $path
 *   The router menu path, as defined in DataBridge_menu().
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for 
 *   modules that want to provide help that is specific to certain values of 
 *   wildcards in $path. For example, you could provide help for the path 
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array 
 *   should always be used rather than directly invoking arg(), because your 
 *   hook implementation may be called for other purposes besides building the 
 *   current page's help. Note that depending on which module is invoking 
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to 
 *   $arg[11] will always be set.
 *   
 * @return string
 *   A localized string containing the help text.
*/
function DataBridge_help($path, $arg){
  $help_output = '';
  return $help_output;
}

/**
 * Handles module permissions.
 *
 * Defines the permissions that are used by the DataBridge module. The 
 * permissions are: 
 * - "access DataBridge": Access the timeline and see open information.
 * - "access DataBridge private": Private information is intended for 
 *   Authorized Users.
 * - "administer DataBridge": Allows users to administer the DataBridge module.
 *
 * @return array 
 *   An array of permission strings. The strings must not be wrapped with the 
 *   t() function, since the string extractor takes care of extracting 
 *   permission names defined in the perm hook for translation.
*/
function DataBridge_permission(){
  return array('administer DataBridge' => array(
                 'title' => t('Administer DataBridge'),
                 'description' => t('Allows a user to administer the settings 
                                     of the DataBridge module.'),
               ),
               'access DataBridge' => array(
                 'title' => t('Access DataBridge'),
                 'description' => t('Allows users to view the DataBridge open
                                     information.'),
               ), 
               'access DataBridge private' => array(
                 'title' => t('Access DataBridge Private'),
                 'description' => t('This permission can be used to hide 
                                     sensitive information from unauthorized 
                                     users.'),
               ),
              );
}

/**
 * Creates the administration form for the DataBridge module.
 *
 * Creates the administration form for the DataBridge module, the form can be
 * found at /admin/settings/DataBridge as defined in DataBridge_menu.
 *
 * @return array $form
 *   A drupal form formatted by system_settings_form().
*/
function DataBridge_admin(){
  $form = array();
  
  $form['DataBridge_database'] = array(
    '#type' => 'fieldset',
    '#title' => t('DataBridge Database Settings'),
    '#description' => t('Information to access the DataBridge database that will be used.'),
    '#collapsible' => TRUE,
  );
  $form['DataBridge_database']['DataBridge_dbhost'] = 
    array('#type' => 'textfield',
	  '#title' => t('DataBridge database host'),
	  '#default_value' => variable_get('DataBridge_dbhost', 'localhost'),
	  '#size' => 20,
	  '#maxlength' => 50,
	  '#description' => t("Address to the DataBridge database."),
	  '#required' => TRUE,
	  );
  $form['DataBridge_database']['DataBridge_dbname'] = 
    array('#type' => 'textfield',
	  '#title' => t('DataBridge database name'),
	  '#default_value' => variable_get('DataBridge_dbname', 'databridge'),
	  '#size' => 20,
	  '#maxlength' => 50,
	  '#description' => t("Name of the DataBridge database."),
	  '#required' => TRUE,
	  );
  $form['DataBridge_database']['DataBridge_dbuser'] = 
    array('#type' => 'textfield',
	  '#title' => t('DataBridge database user'),
	  '#default_value' => variable_get('DataBridge_dbuser', 'databridge'),
	  '#size' => 20,
	  '#maxlength' => 50,
	  '#description' => t("User to connect to the DataBridge database."),
	  '#required' => TRUE,
	  );
  $form['DataBridge_database']['DataBridge_dbpass'] = 
    array('#type' => 'password',
	  '#title' => t('DataBridge database password'),
	  '#default_value' => variable_get('DataBridge_dbpass', ''),
	  '#size' => 20,
	  '#maxlength' => 50,
	  '#description' => t("Password to connect to the DataBridge database."),
	  '#required' => FALSE,
	  );
	return system_settings_form($form);
}

/**
 * Creates the DataBridge paths and menu items.
 *
 * Defines paths to DataBridge pages and defines DataBridge menu items. The
 * items that are defined are:
 * - admin/config/content/databridge: This is the administration page
 * - /databridge: This is a html return hook for open data
 * - /databridge/private: This is a html return hook for private data
*/
function DataBridge_menu() {
  $items = array();
  $items['admin/config/content/databridge'] = 
    array('title' => 'DataBridge',
	  'description' => 'Administration page for the DataBridge module.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('DataBridge_admin'),
	  'access arguments' => array('administer DataBridge'),
	  'type' => MENU_NORMAL_ITEM,
	  );
	$items['databridge/private'] =
    array('page callback' => 'DataBridge_private',
	  'access arguments' => array('access DataBridge private'),
	  'type' => MENU_CALLBACK,
	  );
	$items['databridge/config'] =
    array('title' => 'DataBridge Species Config',
	  'page callback' => 'DataBridge_config_species',
	  'access arguments' => array('administer DataBridge'),
	  'type' => MENU_CALLBACK,
	  );
	$items['databridge/config/analysis'] =
    array('title' => 'DataBridge Analysis Config',
	  'page callback' => 'DataBridge_config_analysis',
	  'access arguments' => array('administer DataBridge'),
	  'type' => MENU_CALLBACK,
	  );
	$items['databridge/config/samplings'] =
    array('title' => 'DataBridge Samplings Config',
	  'page callback' => 'DataBridge_config_samplings',
	  'access arguments' => array('administer DataBridge'),
	  'type' => MENU_CALLBACK,
	  );
	$items['databridge/config/animals'] =
    array('title' => 'DataBridge Animal Config',
	  'page callback' => 'DataBridge_config_animals',
	  'access arguments' => array('administer DataBridge'),
	  'type' => MENU_CALLBACK,
	  );
	$items['databridge/config/samples'] =
    array('title' => 'DataBridge Sample Config',
	  'page callback' => 'DataBridge_config_samples',
	  'access arguments' => array('administer DataBridge'),
	  'type' => MENU_CALLBACK,
	  );
	$items['databridge/animal'] = 
	  array('title' => 'DataBridge Animal Information',
	  'page callback' => 'DataBridge_summary_animal',
	  'access arguments' => array('access DataBridge private'),
	  'type' => MENU_NORMAL_ITEM,
	  );
	$items['databridge/sampling'] = 
	  array('title' => 'DataBridge Sampling Trip Information',
	  'page callback' => 'DataBridge_summary_sampling',
	  'access arguments' => array('access DataBridge private'),
	  'type' => MENU_NORMAL_ITEM,
	  );
	$items['databridge/sample'] = 
	  array('title' => 'DataBridge Sample Information',
	  'page callback' => 'DataBridge_summary_sample',
	  'access arguments' => array('access DataBridge private'),
	  'type' => MENU_NORMAL_ITEM,
	  );
	$items['databridge'] =
    array('title' => 'DataBridge Database Summary',
    'page callback' => 'DataBridge_summary',
	  'access arguments' => array('access DataBridge private'),
	  'type' => MENU_NORMAL_ITEM,
	  );
  return $items;
}

/**
 * Config page for animal species
 *
 * @return string $page
 *   A html page
*/
function DataBridge_config_species() {
  $page_content = '';
  
  $common     = 'Common name of the species, this name will be used in most places on the site.';
  $scientific = 'Scientific name (latin name) of the species, this name will be used mostly to 
                 ensure correct identification of the species and in rare instances in the system.';
  $class      = 'The class of classes of the species, comma separated. The classes assigned to 
                 animals define the sampling classes that will be used in the system. Example 
                 classes are "livestock", "wildlife" or "poultry" or "random".';
  
  $page_content .= '<div class="databridge_instructions">';
  $page_content .= '<h3>Common Name</h3>' . $common;
  $page_content .= '<h3>Scientific Name</h3>' . $scientific;
  $page_content .= '<h3>Class</h3>' . $class;
  $page_content .= '</div>';
  $page_content .= drupal_render(drupal_get_form('DataBridge_species_form'));
  $page_content .= l('Continue to analysis configuration', 'databridge/config/analysis') . ' >>';
  return $page_content;
}

/**
 * Config page for animal analysis
 *
 * @return string $page
 *   A html page
*/
function DataBridge_config_analysis() {
  $page_content = '';
  
  $name        = 'Name of the analysis, will be used to reference this analysis.';
  $description = 'Description of the analysis.';
  $protocol    = 'URL to the protocol used for the analysis.';
  $nr_of_vars  = 'The number of analysis variables that you want to display when viewing analysis results.';
  $species     = 'The species that will be affected by this particular analysis.';
  
  $page_content .= '<div class="databridge_instructions">';
  $page_content .= '<h3>Name</h3>' . $name;
  $page_content .= '<h3>Description</h3>' . $description;
  $page_content .= '<h3>Protocol</h3>' . $protocol;
  $page_content .= '<h3>Nr of variables</h3>' . $nr_of_vars;
  $page_content .= '<h3>Species</h3>' . $species;
  $page_content .= '</div>';
  
  $page_content .= drupal_render(drupal_get_form('DataBridge_analysis_form'));
  
  $page_content .= '<< ' . l('Back to species configuration', 'databridge/config/species');
  $page_content .= ' | ';
  $page_content .= l('Continue to sampling configuration', 'databridge/config/samplings') . ' >>';
  return $page_content;
}

/**
 * Config page for animal samplings
 *
 * @return string $page
 *   A html page
*/
function DataBridge_config_samplings() {
  $page_content = '';
  
  $fields = 'SQL to extract specific information. Empty fields will be ignored by the database.';
  $tables = 'The tables to extract information from. Use joins to make sure that all relevant 
             information is in a single table. Note that this should _not_ include the FROM 
             statement at the start.';
  
  $page_content .= '<div class="databridge_instructions">';
  $page_content .= '<h3>Fields</h3>' . $fields;
  $page_content .= '<h3>Tables</h3>' . $tables;
  $page_content .= '</div>';
  
  $page_content .= drupal_render(drupal_get_form('DataBridge_samplings_form'));
    
  $page_content .= '<< ' . l('Back to analysis configuration', 'databridge/config/analysis');
  $page_content .= ' | ';
  $page_content .= l('Continue to animal configuration', 'databridge/config/animals') . ' >>';
  return $page_content;
}

/**
 * Config page for animals
 *
 * @return string $page
 *   A html page
*/
function DataBridge_config_animals() {
  $page_content = '';
  
  $list     = 'SQL to extract specific information. Empty fields will be ignored by the database.';
  
  $page_content .= '<div class="databridge_instructions">';
  $page_content .= '<h3>Animal information extraction queries</h3>' . $list;
  $page_content .= '</div>';
  
  $page_content .= drupal_render(drupal_get_form('DataBridge_animals_form'));
    
  $page_content .= '<< ' . l('Back to sampling configuration', 'databridge/config/samplings');
  $page_content .= ' | ';
  $page_content .= l('Continue to sample configuration', 'databridge/config/samples') . ' >>';
  return $page_content;
}

/**
 * Config page for samples
 *
 * @return string $page
 *   A html page
*/
function DataBridge_config_samples() {
  $page_content = '';
  
  $list     = 'SQL to extract specific information. Empty fields will be ignored by the database.';
  
  $page_content .= '<div class="databridge_instructions">';
  $page_content .= '<h3>Sample information extraction queries</h3>' . $list;
  $page_content .= '</div>';
  
  $page_content .= drupal_render(drupal_get_form('DataBridge_samples_form'));
    
  $page_content .= '<< ' . l('Back to animal configuration', 'databridge/config/animals');
  return $page_content;
}

/**
 * Configuration page for the database interface. 
 *
 * For admins only! 
 *
 * @param array $form
 *   The form that is to be generated, supplied by drupal
 * @param array &$form_state
 *   The current state of the form, supplied by drupal
 *
 * @return array $form
 *   A drupal form array
*/
function DataBridge_config($form, &$form_state) {
  $form = array();
  if (!($st_fields = DataBridge_get('sampling_trips'))) {
    $st_fields = array('fields' => array('date'           => '', 'origin'          => '', 'latitude'      => '', 
                                         'longitude'      => '', 'sampled_animals' => '', 'sampled_goats' => '', 
                                         'female_goats'   => '', 'female_sheep'    => '', 'goats_alive'   => '', 
                                         'goats_dead'     => '', 'sheep_alive'     => '', 'sheep_dead'    => '', 
                                         'sheep_positive' => '', 'goats_positive'  => '', 
                                         ),
                       'tables' => '',
                      );
  }
  $form['sampling_trips'] = DataBridge_fieldsets('sampling_trips',
                                                 $st_fields);
  if (!($wt_fields = DataBridge_get('wildlife_trips'))) {
    $wt_fields = array('fields' => array('date'           => '', 'origin'          => '', 'latitude'      => '', 
                                         'longitude'      => '', 'samples'         => '',
                                         ),
                       'tables' => '',
                      );
  }
  $form['wildlife_trips'] = DataBridge_fieldsets('wildlife_trips',
                                                 $wt_fields);
  $form['submit'] = 
    array('#type'  => 'submit', 
          '#value' => t('Save Values'), 
    );
	return $form;
}

/**
 * Validation function for the DataBridge_config form.
*/
function DataBridge_config_validate(&$form, &$form_state) {
  // TODO: check for delimiter (|) and throw errors!
}

/**
 *
 *
*/
function DataBridge_config_submit($form_id, &$form_state) {
  $sampling_trips = '';
  $wildlife_trips = '';
  foreach (array_keys($form_state['values']) as $value) {
    switch (substr($value, 0, 3)) {
      case 'st_': $sampling_trips .= $form_state['values'][$value] . ' AS ' . substr($value, 3) . '|'; break;
      case 'wt_': $wildlife_trips .= $form_state['values'][$value] . ' AS ' . substr($value, 3) . '|'; break;
      default: 
    }
  }
  
  $queries = array('sampling_trips' => $sampling_trips, 'wildlife_trips' => $wildlife_trips);
  foreach (array_keys($queries) as $query)
  {
    $prefix = '';
    foreach (explode('_', $query) as $word) {
      $prefix .= $word[0];
    }
    $fields = array('name'   => $query,
                    'fields' => $queries[$query],
                    'tables' => $form_state['values']['from_' . $prefix],);
    $exists = db_select('databridge_queries', 'd')
                       ->fields('d')
                       ->condition('name', $query, '=')
                       ->execute()
                       ->fetchAssoc();
    if ($exists) {
      db_update('databridge_queries')
                ->fields($fields)
                ->condition('name', $query, '=')
                ->execute();
    } else {
      db_insert('databridge_queries')
                ->fields($fields)
                ->execute();
    }
  }
}

/**
 * Serves excel sheets with private information back to other modules.
 *
 * @param string $type
 *   - sampling
 *   - wildlife
 * @param string $opt1
 *   First option to the data generation function, this option is different for
 *   different types, namely:
 *   - sampling: $opt1 = date
 *   - wildlife: $opt1 = date
 * @param string $opt2
 *   Second option to the data generation function, this option is different
 *   for different types, namely:
 *   - sampling: $opt2 = location
 *   - wildife: $opt2 = location
*/
function DataBridge_private($type, $opt1 = '', $opt2 = '') {
  $info = '';
  $filename = 'unknown.xls';
  switch ($type) {
  case 'sampling': $results = DataBridge_SamplingTrip($opt1, $opt2); 
                   $filename = $results[0];
                   $info = $results[1];
                   break;
  case 'wildlife': break;
  case 'summary' : $filename = 'SamplingSummary_' . strftime('%Y-%m-%d') . '.xls';
                   $info = DataBridge_SamplingSummary(); break;
  default: _DataBridge_Message('UnknownType', $type);
  }
  drupal_add_http_header('Content-Type', 'application/vnd.ms-excel'); 
  drupal_add_http_header('Content-Disposition:', 'attachment; filename=' . $filename  . ';');
  echo _Excel($info);
  exit(0);
}

